[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "macos-life-management"
version = "1.0.0"
description = "基于 Palantir 架构原理的 macOS 生活管理系统"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Life Management Team", email = "team@lifemanagement.local"}
]
maintainers = [
    {name = "Life Management Team", email = "team@lifemanagement.local"}
]
keywords = [
    "life-management", 
    "productivity", 
    "macos", 
    "palantir-architecture", 
    "task-management",
    "time-blocking",
    "personal-analytics"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: MacOS X",
    "Framework :: FastAPI",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: Chinese (Simplified)",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Scheduling",
    "Topic :: Personal Information Management",
    "Typing :: Typed",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.0",
    "pydantic>=2.5.0",
    "pyobjc-core>=10.0",
    "pyobjc-framework-EventKit>=10.0",
    "pyobjc-framework-Contacts>=10.0",
    "python-dateutil>=2.8.0",
    "loguru>=0.7.0",
    "psutil>=5.9.0",
    "httpx>=0.25.0",
    "aiofiles>=23.0.0",
]

[project.optional-dependencies]
# AI 功能依赖
ai = [
    "scikit-learn>=1.3.0",
    "numpy>=1.25.0",
    "pandas>=2.1.0",
    "scipy>=1.11.0",
]

# NLP 功能依赖
nlp = [
    "spacy>=3.7.0",
]

# 开发依赖
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

# 文档依赖
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
]

# 可视化依赖
viz = [
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "plotly>=5.17.0",
]

# 完整安装 (包含所有可选依赖)
full = [
    "macos-life-management[ai,nlp,dev,docs,viz]"
]

[project.urls]
Homepage = "https://github.com/life-management/macos-app"
Documentation = "https://docs.lifemanagement.local"
Repository = "https://github.com/life-management/macos-app.git"
"Bug Reports" = "https://github.com/life-management/macos-app/issues"
Changelog = "https://github.com/life-management/macos-app/blob/main/CHANGELOG.md"

[project.scripts]
life-management = "backend.cli:main"
lm = "backend.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["backend*", "frontend*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
frontend = ["static/**/*", "templates/**/*"]
backend = ["**/*.sql", "**/*.yaml", "**/*.json"]

# ================================
# Black 代码格式化配置
# ================================
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # 排除的目录
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
  | migrations
)/
'''

# ================================
# isort 导入排序配置
# ================================
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["backend", "frontend"]
known_third_party = ["fastapi", "sqlalchemy", "pydantic"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# ================================
# MyPy 类型检查配置
# ================================
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "objc.*",
    "EventKit.*",
    "Contacts.*",
    "Foundation.*",
    "spacy.*",
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
]
ignore_missing_imports = true

# ================================
# Pytest 测试配置
# ================================
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=backend",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "macos: marks tests that require macOS specific features",
    "ai: marks tests for AI functionality",
    "api: marks tests for API endpoints",
]

# ================================
# Coverage 覆盖率配置
# ================================
[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/migrations/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

# ================================
# Flake8 代码检查配置
# ================================
[tool.flake8]
max-line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # mccabe
]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "migrations",
    "build",
    "dist",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:F401,F811",  # test files may have unused imports
]

# ================================
# Pre-commit 钩子配置
# ================================
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "backend/__init__.py",
]

# ================================
# Bandit 安全检查配置
# ================================
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert and shell usage warnings in tests

# ================================
# Ruff 配置 (可选的现代 linter)
# ================================
[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "migrations",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["F401", "F811"]

[tool.ruff.isort]
known-first-party = ["backend", "frontend"]

# ================================
# Build 和打包配置
# ================================
[tool.setuptools.dynamic]
version = {attr = "backend.__version__"}

[tool.wheel]
universal = false

# ================================
# 环境特定配置
# ================================
[tool.local]
# 本地开发配置
data_dir = "data"
log_level = "DEBUG"
hot_reload = true

[tool.production]
# 生产环境配置
data_dir = "/var/lib/life-management"
log_level = "INFO"
hot_reload = false